# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T14:09:32+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, List, Optional

from pydantic import BaseModel, Field, RootModel, SecretStr, conint, constr


class BoundedLengthString(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{1,10000}', min_length=1, max_length=10000)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{1,10000}', min_length=1, max_length=10000)


class ClientTokenString(
    RootModel[constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)]
):
    root: constr(pattern=r'^[a-zA-Z0-9-]+$', min_length=1, max_length=64)


class ConcurrentModificationException(RootModel[Any]):
    root: Any


class ConflictException(RootModel[Any]):
    root: Any


class ContentType(RootModel[constr(pattern=r'^[-\w.]+\/[-\w.+]+$', max_length=256)]):
    root: constr(pattern=r'^[-\w.]+\/[-\w.+]+$', max_length=256)


class Description(RootModel[constr(pattern=r'[\P{M}\p{M}]{0,256}', max_length=256)]):
    root: constr(pattern=r'[\P{M}\p{M}]{0,256}', max_length=256)


class DetectedLanguageLowConfidenceException(RootModel[Any]):
    root: Any


class Directionality(Enum):
    UNI = 'UNI'
    MULTI = 'MULTI'


class DisplayLanguageCode(Enum):
    de = 'de'
    en = 'en'
    es = 'es'
    fr = 'fr'
    it = 'it'
    ja = 'ja'
    ko = 'ko'
    pt = 'pt'
    zh = 'zh'
    zh_TW = 'zh-TW'


class EncryptionKeyID(
    RootModel[
        constr(
            pattern=r'(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))',
            min_length=1,
            max_length=400,
        )
    ]
):
    root: constr(
        pattern=r'(arn:aws((-us-gov)|(-iso)|(-iso-b)|(-cn))?:kms:)?([a-z]{2}-[a-z]+(-[a-z]+)?-\d:)?(\d{12}:)?(((key/)?[a-zA-Z0-9-_]+)|(alias/[a-zA-Z0-9:/_-]+))',
        min_length=1,
        max_length=400,
    )


class EncryptionKeyType(Enum):
    KMS = 'KMS'


class Formality(Enum):
    FORMAL = 'FORMAL'
    INFORMAL = 'INFORMAL'


class IamRoleArn(
    RootModel[
        constr(
            pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws(-[^:]+)?:iam::[0-9]{12}:role/.+',
        min_length=20,
        max_length=2048,
    )


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class InvalidFilterException(RootModel[Any]):
    root: Any


class InvalidParameterValueException(RootModel[Any]):
    root: Any


class InvalidRequestException(RootModel[Any]):
    root: Any


class JobDetails(BaseModel):
    DocumentsWithErrorsCount: Optional[Integer] = None
    InputDocumentsCount: Optional[Integer] = None
    TranslatedDocumentsCount: Optional[Integer] = None


class JobId(
    RootModel[
        constr(pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32)
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=32
    )


class JobName(
    RootModel[
        constr(
            pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
        )
    ]
):
    root: constr(
        pattern=r'^([\p{L}\p{Z}\p{N}_.:/=+\-%@]*)$', min_length=1, max_length=256
    )


class JobStatus(Enum):
    SUBMITTED = 'SUBMITTED'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    COMPLETED_WITH_ERROR = 'COMPLETED_WITH_ERROR'
    FAILED = 'FAILED'
    STOP_REQUESTED = 'STOP_REQUESTED'
    STOPPED = 'STOPPED'


class LanguageCodeString(RootModel[constr(min_length=2, max_length=5)]):
    root: constr(min_length=2, max_length=5)


class LanguageCodeStringList(RootModel[List[LanguageCodeString]]):
    root: List[LanguageCodeString]


class LimitExceededException(RootModel[Any]):
    root: Any


class LocalizedNameString(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class Long(RootModel[int]):
    root: int


class MaxResultsInteger(RootModel[conint(ge=1, le=500)]):
    root: conint(ge=1, le=500)


class MergeStrategy(Enum):
    OVERWRITE = 'OVERWRITE'


class NextToken(RootModel[constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)]):
    root: constr(pattern=r'\p{ASCII}{0,8192}', max_length=8192)


class ParallelDataArn(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ParallelDataFormat(Enum):
    TSV = 'TSV'
    CSV = 'CSV'
    TMX = 'TMX'


class ParallelDataStatus(Enum):
    CREATING = 'CREATING'
    UPDATING = 'UPDATING'
    ACTIVE = 'ACTIVE'
    DELETING = 'DELETING'
    FAILED = 'FAILED'


class Profanity(Enum):
    MASK = 'MASK'


class ResourceArn(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class ResourceName(
    RootModel[constr(pattern=r'^([A-Za-z0-9-]_?)+$', min_length=1, max_length=256)]
):
    root: constr(pattern=r'^([A-Za-z0-9-]_?)+$', min_length=1, max_length=256)


class ResourceNameList(RootModel[List[ResourceName]]):
    root: List[ResourceName]


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class S3Uri(
    RootModel[
        constr(
            pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
        )
    ]
):
    root: constr(
        pattern=r's3://[a-z0-9][\.\-a-z0-9]{1,61}[a-z0-9](/.*)?', max_length=1024
    )


class ServiceUnavailableException(RootModel[Any]):
    root: Any


class StartTextTranslationJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class StopTextTranslationJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class StopTextTranslationJobResponse(BaseModel):
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')


class String(RootModel[constr(pattern=r'[\P{M}\p{M}]{0,10000}', max_length=10000)]):
    root: constr(pattern=r'[\P{M}\p{M}]{0,10000}', max_length=10000)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=200, min_length=0)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(min_length=0, max_length=256)]):
    root: constr(min_length=0, max_length=256)


class TargetLanguageCodeStringList(RootModel[List[LanguageCodeString]]):
    root: List[LanguageCodeString] = Field(..., min_length=1)


class Term(BaseModel):
    SourceText: Optional[String] = None
    TargetText: Optional[String] = None


class TermList(RootModel[List[Term]]):
    root: List[Term]


class TerminologyArn(RootModel[constr(min_length=1, max_length=512)]):
    root: constr(min_length=1, max_length=512)


class TerminologyDataFormat(Enum):
    CSV = 'CSV'
    TMX = 'TMX'
    TSV = 'TSV'


class TerminologyDataLocation(BaseModel):
    Location: String
    RepositoryType: String


class TerminologyFile(RootModel[SecretStr]):
    root: SecretStr


class TextSizeLimitExceededException(RootModel[Any]):
    root: Any


class Timestamp(RootModel[datetime]):
    root: datetime


class TooManyRequestsException(RootModel[Any]):
    root: Any


class TooManyTagsException(RootModel[Any]):
    root: Any


class TranslatedTextString(
    RootModel[constr(pattern=r'[\P{M}\p{M}]{0,20000}', max_length=20000)]
):
    root: constr(pattern=r'[\P{M}\p{M}]{0,20000}', max_length=20000)


class TranslationSettings(BaseModel):
    Formality_1: Optional[Formality] = Field(None, alias='Formality')
    Profanity_1: Optional[Profanity] = Field(None, alias='Profanity')


class UnboundedLengthString(RootModel[str]):
    root: str


class UnsupportedDisplayLanguageCodeException(RootModel[Any]):
    root: Any


class UnsupportedLanguagePairException(RootModel[Any]):
    root: Any


class UntagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    TagKeys: TagKeyList


class UntagResourceResponse(BaseModel):
    pass


class UpdateParallelDataResponse(BaseModel):
    LatestUpdateAttemptAt: Optional[Timestamp] = None
    LatestUpdateAttemptStatus: Optional[ParallelDataStatus] = None
    Name: Optional[ResourceName] = None
    Status: Optional[ParallelDataStatus] = None


class XAmzTarget(Enum):
    AWSShineFrontendService_20170701_CreateParallelData = (
        'AWSShineFrontendService_20170701.CreateParallelData'
    )


class XAmzTarget1(Enum):
    AWSShineFrontendService_20170701_DeleteParallelData = (
        'AWSShineFrontendService_20170701.DeleteParallelData'
    )


class XAmzTarget2(Enum):
    AWSShineFrontendService_20170701_DeleteTerminology = (
        'AWSShineFrontendService_20170701.DeleteTerminology'
    )


class XAmzTarget3(Enum):
    AWSShineFrontendService_20170701_DescribeTextTranslationJob = (
        'AWSShineFrontendService_20170701.DescribeTextTranslationJob'
    )


class XAmzTarget4(Enum):
    AWSShineFrontendService_20170701_GetParallelData = (
        'AWSShineFrontendService_20170701.GetParallelData'
    )


class XAmzTarget5(Enum):
    AWSShineFrontendService_20170701_GetTerminology = (
        'AWSShineFrontendService_20170701.GetTerminology'
    )


class XAmzTarget6(Enum):
    AWSShineFrontendService_20170701_ImportTerminology = (
        'AWSShineFrontendService_20170701.ImportTerminology'
    )


class XAmzTarget7(Enum):
    AWSShineFrontendService_20170701_ListLanguages = (
        'AWSShineFrontendService_20170701.ListLanguages'
    )


class XAmzTarget8(Enum):
    AWSShineFrontendService_20170701_ListParallelData = (
        'AWSShineFrontendService_20170701.ListParallelData'
    )


class XAmzTarget9(Enum):
    AWSShineFrontendService_20170701_ListTagsForResource = (
        'AWSShineFrontendService_20170701.ListTagsForResource'
    )


class XAmzTarget10(Enum):
    AWSShineFrontendService_20170701_ListTerminologies = (
        'AWSShineFrontendService_20170701.ListTerminologies'
    )


class XAmzTarget11(Enum):
    AWSShineFrontendService_20170701_ListTextTranslationJobs = (
        'AWSShineFrontendService_20170701.ListTextTranslationJobs'
    )


class XAmzTarget12(Enum):
    AWSShineFrontendService_20170701_StartTextTranslationJob = (
        'AWSShineFrontendService_20170701.StartTextTranslationJob'
    )


class XAmzTarget13(Enum):
    AWSShineFrontendService_20170701_StopTextTranslationJob = (
        'AWSShineFrontendService_20170701.StopTextTranslationJob'
    )


class XAmzTarget14(Enum):
    AWSShineFrontendService_20170701_TagResource = (
        'AWSShineFrontendService_20170701.TagResource'
    )


class XAmzTarget15(Enum):
    AWSShineFrontendService_20170701_TranslateText = (
        'AWSShineFrontendService_20170701.TranslateText'
    )


class XAmzTarget16(Enum):
    AWSShineFrontendService_20170701_UntagResource = (
        'AWSShineFrontendService_20170701.UntagResource'
    )


class XAmzTarget17(Enum):
    AWSShineFrontendService_20170701_UpdateParallelData = (
        'AWSShineFrontendService_20170701.UpdateParallelData'
    )


class AppliedTerminology(BaseModel):
    Name: Optional[ResourceName] = None
    Terms: Optional[TermList] = None


class AppliedTerminologyList(RootModel[List[AppliedTerminology]]):
    root: List[AppliedTerminology]


class CreateParallelDataResponse(BaseModel):
    Name: Optional[ResourceName] = None
    Status: Optional[ParallelDataStatus] = None


class DeleteParallelDataRequest(BaseModel):
    Name: ResourceName


class DeleteParallelDataResponse(BaseModel):
    Name: Optional[ResourceName] = None
    Status: Optional[ParallelDataStatus] = None


class DeleteTerminologyRequest(BaseModel):
    Name: ResourceName


class DescribeTextTranslationJobRequest(BaseModel):
    JobId_1: JobId = Field(..., alias='JobId')


class EncryptionKey(BaseModel):
    Id: EncryptionKeyID
    Type: EncryptionKeyType


class GetParallelDataRequest(BaseModel):
    Name: ResourceName


class GetTerminologyRequest(BaseModel):
    Name: ResourceName
    TerminologyDataFormat_1: Optional[TerminologyDataFormat] = Field(
        None, alias='TerminologyDataFormat'
    )


class InputDataConfig(BaseModel):
    ContentType_1: ContentType = Field(..., alias='ContentType')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class Language(BaseModel):
    LanguageCode: LanguageCodeString
    LanguageName: LocalizedNameString


class LanguagesList(RootModel[List[Language]]):
    root: List[Language]


class ListLanguagesRequest(BaseModel):
    DisplayLanguageCode_1: Optional[DisplayLanguageCode] = Field(
        None, alias='DisplayLanguageCode'
    )
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListLanguagesResponse(BaseModel):
    DisplayLanguageCode_1: Optional[DisplayLanguageCode] = Field(
        None, alias='DisplayLanguageCode'
    )
    Languages: Optional[LanguagesList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListParallelDataRequest(BaseModel):
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTagsForResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')


class ListTerminologiesRequest(BaseModel):
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class OutputDataConfig(BaseModel):
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ParallelDataConfig(BaseModel):
    Format: ParallelDataFormat
    S3Uri_1: S3Uri = Field(..., alias='S3Uri')


class ParallelDataDataLocation(BaseModel):
    Location: String
    RepositoryType: String


class ParallelDataProperties(BaseModel):
    Arn: Optional[ParallelDataArn] = None
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    FailedRecordCount: Optional[Long] = None
    ImportedDataSize: Optional[Long] = None
    ImportedRecordCount: Optional[Long] = None
    LastUpdatedAt: Optional[Timestamp] = None
    LatestUpdateAttemptAt: Optional[Timestamp] = None
    LatestUpdateAttemptStatus: Optional[ParallelDataStatus] = None
    Message: Optional[UnboundedLengthString] = None
    Name: Optional[ResourceName] = None
    ParallelDataConfig_1: Optional[ParallelDataConfig] = Field(
        None, alias='ParallelDataConfig'
    )
    SkippedRecordCount: Optional[Long] = None
    SourceLanguageCode: Optional[LanguageCodeString] = None
    Status: Optional[ParallelDataStatus] = None
    TargetLanguageCodes: Optional[LanguageCodeStringList] = None


class ParallelDataPropertiesList(RootModel[List[ParallelDataProperties]]):
    root: List[ParallelDataProperties]


class StartTextTranslationJobRequest(BaseModel):
    ClientToken: ClientTokenString
    DataAccessRoleArn: IamRoleArn
    InputDataConfig_1: InputDataConfig = Field(..., alias='InputDataConfig')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    OutputDataConfig_1: OutputDataConfig = Field(..., alias='OutputDataConfig')
    ParallelDataNames: Optional[ResourceNameList] = None
    Settings: Optional[TranslationSettings] = None
    SourceLanguageCode: LanguageCodeString
    TargetLanguageCodes: TargetLanguageCodeStringList
    TerminologyNames: Optional[ResourceNameList] = None


class Tag(BaseModel):
    Key: TagKey
    Value: TagValue


class TagList(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=200, min_length=0)


class TagResourceRequest(BaseModel):
    ResourceArn_1: ResourceArn = Field(..., alias='ResourceArn')
    Tags: TagList


class TerminologyData(BaseModel):
    Directionality_1: Optional[Directionality] = Field(None, alias='Directionality')
    File: TerminologyFile
    Format: TerminologyDataFormat


class TerminologyProperties(BaseModel):
    Arn: Optional[TerminologyArn] = None
    CreatedAt: Optional[Timestamp] = None
    Description_1: Optional[Description] = Field(None, alias='Description')
    Directionality_1: Optional[Directionality] = Field(None, alias='Directionality')
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    Format: Optional[TerminologyDataFormat] = None
    LastUpdatedAt: Optional[Timestamp] = None
    Message: Optional[UnboundedLengthString] = None
    Name: Optional[ResourceName] = None
    SizeBytes: Optional[Integer] = None
    SkippedTermCount: Optional[Integer] = None
    SourceLanguageCode: Optional[LanguageCodeString] = None
    TargetLanguageCodes: Optional[LanguageCodeStringList] = None
    TermCount: Optional[Integer] = None


class TerminologyPropertiesList(RootModel[List[TerminologyProperties]]):
    root: List[TerminologyProperties]


class TextTranslationJobFilter(BaseModel):
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    SubmittedAfterTime: Optional[Timestamp] = None
    SubmittedBeforeTime: Optional[Timestamp] = None


class TextTranslationJobProperties(BaseModel):
    DataAccessRoleArn: Optional[IamRoleArn] = None
    EndTime: Optional[Timestamp] = None
    InputDataConfig_1: Optional[InputDataConfig] = Field(None, alias='InputDataConfig')
    JobDetails_1: Optional[JobDetails] = Field(None, alias='JobDetails')
    JobId_1: Optional[JobId] = Field(None, alias='JobId')
    JobName_1: Optional[JobName] = Field(None, alias='JobName')
    JobStatus_1: Optional[JobStatus] = Field(None, alias='JobStatus')
    Message: Optional[UnboundedLengthString] = None
    OutputDataConfig_1: Optional[OutputDataConfig] = Field(
        None, alias='OutputDataConfig'
    )
    ParallelDataNames: Optional[ResourceNameList] = None
    Settings: Optional[TranslationSettings] = None
    SourceLanguageCode: Optional[LanguageCodeString] = None
    SubmittedTime: Optional[Timestamp] = None
    TargetLanguageCodes: Optional[TargetLanguageCodeStringList] = None
    TerminologyNames: Optional[ResourceNameList] = None


class TextTranslationJobPropertiesList(RootModel[List[TextTranslationJobProperties]]):
    root: List[TextTranslationJobProperties]


class TranslateTextRequest(BaseModel):
    Settings: Optional[TranslationSettings] = None
    SourceLanguageCode: LanguageCodeString
    TargetLanguageCode: LanguageCodeString
    TerminologyNames: Optional[ResourceNameList] = None
    Text: BoundedLengthString


class TranslateTextResponse(BaseModel):
    AppliedSettings: Optional[TranslationSettings] = None
    AppliedTerminologies: Optional[AppliedTerminologyList] = None
    SourceLanguageCode: LanguageCodeString
    TargetLanguageCode: LanguageCodeString
    TranslatedText: TranslatedTextString


class UpdateParallelDataRequest(BaseModel):
    ClientToken: ClientTokenString
    Description_1: Optional[Description] = Field(None, alias='Description')
    Name: ResourceName
    ParallelDataConfig_1: ParallelDataConfig = Field(..., alias='ParallelDataConfig')


class CreateParallelDataRequest(BaseModel):
    ClientToken: ClientTokenString
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    Name: ResourceName
    ParallelDataConfig_1: ParallelDataConfig = Field(..., alias='ParallelDataConfig')
    Tags: Optional[TagList] = None


class DescribeTextTranslationJobResponse(BaseModel):
    TextTranslationJobProperties_1: Optional[TextTranslationJobProperties] = Field(
        None, alias='TextTranslationJobProperties'
    )


class GetParallelDataResponse(BaseModel):
    AuxiliaryDataLocation: Optional[ParallelDataDataLocation] = None
    DataLocation: Optional[ParallelDataDataLocation] = None
    LatestUpdateAttemptAuxiliaryDataLocation: Optional[ParallelDataDataLocation] = None
    ParallelDataProperties_1: Optional[ParallelDataProperties] = Field(
        None, alias='ParallelDataProperties'
    )


class GetTerminologyResponse(BaseModel):
    AuxiliaryDataLocation: Optional[TerminologyDataLocation] = None
    TerminologyDataLocation_1: Optional[TerminologyDataLocation] = Field(
        None, alias='TerminologyDataLocation'
    )
    TerminologyProperties_1: Optional[TerminologyProperties] = Field(
        None, alias='TerminologyProperties'
    )


class ImportTerminologyRequest(BaseModel):
    Description_1: Optional[Description] = Field(None, alias='Description')
    EncryptionKey_1: Optional[EncryptionKey] = Field(None, alias='EncryptionKey')
    MergeStrategy_1: MergeStrategy = Field(..., alias='MergeStrategy')
    Name: ResourceName
    Tags: Optional[TagList] = None
    TerminologyData_1: TerminologyData = Field(..., alias='TerminologyData')


class ImportTerminologyResponse(BaseModel):
    AuxiliaryDataLocation: Optional[TerminologyDataLocation] = None
    TerminologyProperties_1: Optional[TerminologyProperties] = Field(
        None, alias='TerminologyProperties'
    )


class ListParallelDataResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    ParallelDataPropertiesList_1: Optional[ParallelDataPropertiesList] = Field(
        None, alias='ParallelDataPropertiesList'
    )


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagList] = None


class ListTerminologiesResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TerminologyPropertiesList_1: Optional[TerminologyPropertiesList] = Field(
        None, alias='TerminologyPropertiesList'
    )


class ListTextTranslationJobsRequest(BaseModel):
    Filter: Optional[TextTranslationJobFilter] = None
    MaxResults: Optional[MaxResultsInteger] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListTextTranslationJobsResponse(BaseModel):
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TextTranslationJobPropertiesList_1: Optional[TextTranslationJobPropertiesList] = (
        Field(None, alias='TextTranslationJobPropertiesList')
    )
